#!/bin/sh -e
# Copyright (c) 2015 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $BOOTSTRAP_RELEASE (if different
# from $RELEASE), $ARCH, $CAFILE, $VERIFYSIG, and $MIRROR.

PINNED_FINGERPRINTS_DEBOOTSTRAP='
        B60EBF2984453C70D74CF478FF914AF0C2B35520
        D5C2F9BFCA128BBA22A77218872F702C4D6E25A8'
PINNED_FINGERPRINTS_RELEASE='
	0E4EDE2C7F3E1FC0D033800E64481591B98321F9
	9FED2BCBDCD29CDF762678CBAED4B06F473041FA
	ED6D65271AACF0FF15D123036FB2A1C265FFB764
	A1BD8E9D78F7FE5C3E65D8AF8B48AD6246925553
	75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1
	126C0D24BD8A2942CC7DF8AC7638D0442B90D010
	D21169141CECD440F2EB8DDA9D6D8F6BC857C906'

if [ -n $VERIFYSIG ]; then
    if [ ! "${CACERT:0:1}" = "/" ]; then
        CACERT=$PREFIX/$CACERT
    fi

    # Create the temporary directory and delete it upon exit
    sigtmp="`mktemp -d --tmpdir=/tmp "${APPLICATION}_pgp.XXX"`"
    addtrap "rm -rf --one-file-system '$sigtmp'"

    # Ensure that the temporary directory has exec+dev, or mount a new tmpfs
    if [ "$NOEXECTMP" = 'y' ]; then
        mount -i -t tmpfs -o 'rw,dev,exec' tmpfs "$sigtmp"
        chmod 700 "$sigtmp"
        addtrap "umount -l '$sigtmp'"
    fi

    gpg -q --no-default-keyring --homedir $sigtmp -k \
    || error 2 "gnupg initialization failed"
    cat > $sigtmp/gpg.conf << EOF
keyserver $PGPSVR
keyserver-options ca-cert-file=$CACERT
keyserver-options no-try-dns-srv
keyserver-options no-honor-keyserver-url
keyid-format 0xlong
with-fingerprint
EOF

    for key in "$PINNED_FINGERPRINTS_DEBOOTSTRAP"; do
        gpg -q --no-default-keyring --homedir $sigtmp \
        --keyring $sigtmp/debootstrap.gpg --recv-key $key \
        || error 2 "Fetching key $key failed."
        gpg -q --no-default-keyring --homedir $sigtmp \
        --keyring $sigtmp/debootstrap.gpg -k $key > /dev/null \
        || error 2 "Fetched key was not what we requested"
    done
    for key in "$PINNED_FINGERPRINTS_RELEASE"; do
        gpg -q --no-default-keyring --homedir $sigtmp \
        --keyring $sigtmp/release.gpg --recv-key $key \
        || error 2 "Fetching key $key failed."
        gpg -q --no-default-keyring --homedir $sigtmp \
        --keyring $sigtmp/release.gpg -k $key > /dev/null \
        || error 2 "Fetched key was not what we requested"
    done
fi

# Grab the latest release of debootstrap
echo -n 'Downloading latest debootstrap...' 1>&2
d='https://anonscm.debian.org/gitweb/?p=d-i/debootstrap.git;a=snapshot;h=HEAD;sf=tgz'
if [ -n $VERIFYSIG ] || ! wget -O- --no-verbose --timeout=60 -t2 "$d"  \
        | tar -C "$tmp" --strip-components=1 -zx 2>/dev/null; then
    if [ -z $VERIFYSIG ]; then
        echo 1>&2
        echo 'Download from Debian gitweb failed. Trying latest release...' 1>&2
    else
        echo 'and signature...' 1>&2
    fi
    d='http://httpredir.debian.org/debian/pool/main/d/debootstrap/'
    f="`wget -O- --no-verbose --timeout=60 -t2 "$d" \
            | sed -ne 's ^.*\(debootstrap_[0-9.]*.tar.gz\).*$ \1 p' \
            | tail -n 1`"
    if [ -z "$f" ]; then
        error 1 'Failed to download debootstrap.
Check your internet connection or proxy settings and try again.'
    fi
    v="${f#*_}"
    v="${v%.tar.xz}"
    echo "Downloading debootstrap version $v..." 1>&2
    if ! wget -O- --no-verbose --timeout=60 -t2 "$d$f" \
            | tee $sigtmp/$f \
            | tar -C "$tmp" --strip-components=1 -zx 2>/dev/null; then
        error 1 'Failed to download debootstrap.'
    fi
    if [ -n $VERIFYSIG ]; then
        s="${f/tar.gz/dsc}"
        if ! wget -O "$sigtmp/$s" --no-verbose --timeout=60 -t2 "$d$s"; then
            error 1 'Failed to download debootstrap signature.'
        fi
        if ! is_pgp_formatted "$sigtmp/$s" || \
                ! gpg -q --no-default-keyring --homedir $sigtmp \
                --keyring $sigtmp/debootstrap.gpg --verify $sigtmp/$s || \
                ! grep -q `sha256sum $sigtmp/$f | awk '{ print $1; }'` \
                $sigtmp/$s; then
            error 1 "Signature verification failed."
        fi
        echo "Verification successful."
    fi
fi

# Patch debootstrap so that it retries downloading packages
echo 'Patching debootstrap...' 1>&2
if awk '
    t == 3 && /warning RETRY/ { print "sleep 1"; t=4 }
    t == 2 && /-z \"\$checksum\"/ { sub(/\$checksum/, "$checksum$failed"); t=3 }
    t == 1 { if (/if \[/) { sub(/if \[/, "elif ["); t=2 } else { exit 1 } }
    /if ! just_get \"\$from\" \"\$dest2\"; then continue 2; fi/ {
        sub(/if !/, "failed=; if !")
        sub(/continue 2; fi/, "failed=y")
        t=1
    }
    1
    END { if (t != 4) exit 1 }
        ' "$tmp/functions" > "$tmp/functions.new"; then
    mv -f "$tmp/functions.new" "$tmp/functions"
else
    rm -f "$tmp/functions.new"
    echo "Unable to patch debootstrap, moving on..." 1>&2
fi

# Add the necessary debootstrap executables
newpath="$PATH:$tmp"
cp "$INSTALLERDIR/$DISTRO/ar" "$INSTALLERDIR/$DISTRO/pkgdetails" "$tmp/"
chmod 755 "$tmp/ar" "$tmp/pkgdetails"

# debootstrap wants a file to initialize /dev with, but we don't actually
# want any files there. Create an empty tarball that it can extract.
tar -czf "$tmp/devices.tar.gz" -T /dev/null

# There is no bootstrap script for some distros derived from Debian. Thus we use
# the scripts for matching upstream distros to bootstrap the derived distros.
if [ ! -f "$tmp/scripts/$RELEASE" ]; then
    ln -s "$tmp/scripts/$BOOTSTRAP_RELEASE" "$tmp/scripts/$RELEASE"
fi

debootstrap_arg=''
if [ -n $VERIFYSIG ]; then
    debootstrap_arg="--keyring=$sigtmp/release.gpg --force-check-gpg"
fi

# Grab the release and drop it into the subdirectory
echo 'Downloading bootstrap files...' 1>&2
PATH="$newpath" DEBOOTSTRAP_DIR="$tmp" $FAKEROOT \
    "$tmp/debootstrap" --foreign --arch="$ARCH" \
    $debootstrap_arg \
    "$RELEASE" "$tmp/$subdir" "$MIRROR" 1>&2

if [ -n $VERIFYSIG ]; then
    mkdir -p $tmp/$subdir/usr/share/keyrings
    cp -ar $sigtmp/release.gpg \
        $tmp/$subdir/usr/share/keyrings/debian-archive-keyring.gpg
fi

